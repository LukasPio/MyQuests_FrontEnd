"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.toggleTimer=exports.stopTimer=exports.resumeTimer=exports.isTimerRunning=exports.increaseTimer=exports.getTimerLeft=void 0;var _globalState=_interopRequireDefault(require("../globalState.js"));var _domUtils=require("../utils/dom/domUtils.js");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{"default":obj}}/**
 * If `timer` parameter is set, returns number of milliseconds of timer remained.
 * Otherwise, returns undefined.
 *
 * @returns {number | undefined}
 */var getTimerLeft=exports.getTimerLeft=function getTimerLeft(){return _globalState["default"].timeout&&_globalState["default"].timeout.getTimerLeft()};/**
 * Stop timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 *
 * @returns {number | undefined}
 */var stopTimer=exports.stopTimer=function stopTimer(){if(_globalState["default"].timeout){(0,_domUtils.stopTimerProgressBar)();return _globalState["default"].timeout.stop()}};/**
 * Resume timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 *
 * @returns {number | undefined}
 */var resumeTimer=exports.resumeTimer=function resumeTimer(){if(_globalState["default"].timeout){var remaining=_globalState["default"].timeout.start();(0,_domUtils.animateTimerProgressBar)(remaining);return remaining}};/**
 * Resume timer. Returns number of milliseconds of timer remained.
 * If `timer` parameter isn't set, returns undefined.
 *
 * @returns {number | undefined}
 */var toggleTimer=exports.toggleTimer=function toggleTimer(){var timer=_globalState["default"].timeout;return timer&&(timer.running?stopTimer():resumeTimer())};/**
 * Increase timer. Returns number of milliseconds of an updated timer.
 * If `timer` parameter isn't set, returns undefined.
 *
 * @param {number} ms
 * @returns {number | undefined}
 */var increaseTimer=exports.increaseTimer=function increaseTimer(ms){if(_globalState["default"].timeout){var remaining=_globalState["default"].timeout.increase(ms);(0,_domUtils.animateTimerProgressBar)(remaining,true);return remaining}};/**
 * Check if timer is running. Returns true if timer is running
 * or false if timer is paused or stopped.
 * If `timer` parameter isn't set, returns undefined
 *
 * @returns {boolean}
 */var isTimerRunning=exports.isTimerRunning=function isTimerRunning(){return!!(_globalState["default"].timeout&&_globalState["default"].timeout.isRunning())};