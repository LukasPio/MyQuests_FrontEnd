"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.warnOnce=exports.warnAboutDeprecation=exports.warn=exports.isPromise=exports.hasToPromiseFn=exports.error=exports.consolePrefix=exports.capitalizeFirstLetter=exports.callIfFunction=exports.asPromise=void 0;function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}var consolePrefix=exports.consolePrefix="SweetAlert2:";/**
 * Capitalize the first letter of a string
 *
 * @param {string} str
 * @returns {string}
 */var capitalizeFirstLetter=exports.capitalizeFirstLetter=function capitalizeFirstLetter(str){return str.charAt(0).toUpperCase()+str.slice(1)};/**
 * Standardize console warnings
 *
 * @param {string | string[]} message
 */var warn=exports.warn=function warn(message){console.warn("".concat(consolePrefix," ").concat(_typeof(message)==="object"?message.join(" "):message))};/**
 * Standardize console errors
 *
 * @param {string} message
 */var error=exports.error=function error(message){console.error("".concat(consolePrefix," ").concat(message))};/**
 * Private global state for `warnOnce`
 *
 * @type {string[]}
 * @private
 */var previousWarnOnceMessages=[];/**
 * Show a console warning, but only if it hasn't already been shown
 *
 * @param {string} message
 */var warnOnce=exports.warnOnce=function warnOnce(message){if(!previousWarnOnceMessages.includes(message)){previousWarnOnceMessages.push(message);warn(message)}};/**
 * Show a one-time console warning about deprecated params/methods
 *
 * @param {string} deprecatedParam
 * @param {string} useInstead
 */var warnAboutDeprecation=exports.warnAboutDeprecation=function warnAboutDeprecation(deprecatedParam,useInstead){warnOnce("\"".concat(deprecatedParam,"\" is deprecated and will be removed in the next major release. Please use \"").concat(useInstead,"\" instead."))};/**
 * If `arg` is a function, call it (with no arguments or context) and return the result.
 * Otherwise, just pass the value through
 *
 * @param {Function | any} arg
 * @returns {any}
 */var callIfFunction=exports.callIfFunction=function callIfFunction(arg){return typeof arg==="function"?arg():arg};/**
 * @param {any} arg
 * @returns {boolean}
 */var hasToPromiseFn=exports.hasToPromiseFn=function hasToPromiseFn(arg){return arg&&typeof arg.toPromise==="function"};/**
 * @param {any} arg
 * @returns {Promise<any>}
 */var asPromise=exports.asPromise=function asPromise(arg){return hasToPromiseFn(arg)?arg.toPromise():Promise.resolve(arg)};/**
 * @param {any} arg
 * @returns {boolean}
 */var isPromise=exports.isPromise=function isPromise(arg){return arg&&Promise.resolve(arg)===arg};